{
  "_from": "mongoose-gridstore",
  "_id": "mongoose-gridstore@0.1.25",
  "_inBundle": false,
  "_integrity": "sha1-SA+cqQcgEcJD2Qn/57PUwG2c9aU=",
  "_location": "/mongoose-gridstore",
  "_phantomChildren": {
    "async": "2.1.4",
    "bson": "1.0.5",
    "kareem": "2.0.5",
    "lodash.get": "4.4.2",
    "mime-db": "1.33.0",
    "mongoose-legacy-pluralize": "1.0.2",
    "mpath": "0.3.0",
    "mquery": "3.0.0",
    "ms": "2.0.0",
    "regexp-clone": "0.0.1",
    "require_optional": "1.0.1",
    "sliced": "1.0.1"
  },
  "_requested": {
    "escapedName": "mongoose-gridstore",
    "fetchSpec": "latest",
    "name": "mongoose-gridstore",
    "raw": "mongoose-gridstore",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-gridstore/-/mongoose-gridstore-0.1.25.tgz",
  "_shasum": "480f9ca9072011c243d909ffe7b3d4c06d9cf5a5",
  "_shrinkwrap": null,
  "_spec": "mongoose-gridstore",
  "_where": "/home/veluvijay/web__app/server-backend",
  "author": {
    "email": "dennis.lemon@sudselekt.com",
    "name": "Dennis Lemon"
  },
  "bugs": {
    "url": "https://github.com/dlemon/mongoose-gridstore/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "mime-types": "latest",
    "mongoose": "latest",
    "q": "latest",
    "rwlock": "latest"
  },
  "deprecated": false,
  "description": "Mongoose plugin for storing large sized attachments to your document schema",
  "devDependencies": {
    "chai": "latest",
    "mocha": "latest"
  },
  "engines": {
    "node": ">=0.10"
  },
  "homepage": "https://github.com/dlemon/mongoose-gridstore#readme",
  "keywords": [
    "attachements",
    "base64",
    "gridstore",
    "imagemagick",
    "images",
    "mongodb",
    "mongoose",
    "mongoose-gridstore",
    "mongoose-plugin"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mongoose-gridstore",
  "optionalDependencies": {},
  "readme": "![alt tag](https://travis-ci.org/dlemon/mongoose-gridstore.svg?branch=master) [![NPM version][npm-version-image]][npm-url]  [![MIT License][license-image]][license-url] [![NPM downloads][npm-downloads-image]][npm-url]\r\n\r\n# mongoose-gridstore\r\nPromise based mongoose plugin for storing large size attachments to your document schema.\r\n\r\n## Installation\r\n\r\n```shell\r\nnpm install mongoose-gridstore\r\n```\r\nor add it to your `package.json`.\r\n\r\n## Usage\r\nThis module is a mongoose plugin that decorates your schema with large size attachments. \r\nAttachments are stored as base64 strings.\r\n\r\n### Granularity\r\nYou have the ability to partially/fully load all attachments or do the same for a single attachment.\r\n\r\n### Schema decoration\r\n```javascript\r\nvar mongoose  = require('mongoose');\r\nvar gridStore = require('mongoose-gridstore');\r\n\r\nvar emailSchema = new mongoose.Schema({\r\n    from   : {type:String},\r\n    to     : {type:String},\r\n\tsubject: {type:String}\r\n});\r\n\r\nemailSchema.plugin(gridStore);\r\nvar Email = mongoose.model('Email', emailSchema);\r\n```\r\n\r\n#### Plugin options\r\n```javascript\r\n\r\nemailSchema.plugin(gridStore, {    \r\n\tkeys     : ['property1', 'property2'],  //optional, property names that you want to add to the attachment object.\r\n    mongoose : mongoose  //optional, the mongoose instance your app is using. Defaults to latest mongoose version.\r\n});\r\n```\r\n\r\n## API\r\n\r\n### Adding an attachment\r\nOnce you have decorated your schema as shown above you can start adding attachments.\r\n\r\n```javascript\r\nvar email = new Email();\r\n\r\nemail.addAttachment(\"file.txt\", new Buffer('test'))\r\n.then(function(doc) {\r\n    //email contains the attachment. promise returns the doc for further promise chaining.\r\n})\r\n.catch(function(err) {\r\n    throw err;\r\n});\r\n```\r\n\r\n### Accessing attachments\r\n\r\n```javascript\r\nemail.attachments.forEach(function(attachment) {\r\n\tconsole.log(attachment.name);\r\n\tconsole.log(attachment.mime-type);\r\n});\r\n```\r\n\r\n#### Attachment object\r\n\r\n```javascript\r\nvar attachment = {\r\n\tfilename : '',\t              //the filename of the attachment\r\n\tbuffer   : new Buffer(''),    //base64 string with the content of your attachment\r\n\tmimetype : ''\t              //mime-type of your attachment\r\n};\r\n```\r\nIf you have specified the keys option, these keys are added automatically as properties to the attachment object.\r\nThe keys will be stored as meta-data in the gridstore. Keys are explicitly updated as follows:\r\n\r\n```javascript\r\nemail.attachments.forEach(function(attachment) {\r\n\tattachment.property1 = 'test property 1'  //any javascript object you like\r\n    attachment.property2 = 'test property 2'  //any javascript object you like\r\n});\r\n\r\nemail.save();\r\n```\r\n\r\n### Retrieving attachments\r\n\r\n```javascript\r\nemail.loadAttachments()\r\n.then(function(doc) {\r\n    //your email object now contains the attachments\r\n    console.log(doc.attachments.length); \r\n})\r\n.catch(function(err) {\r\n    throw err;\r\n});\r\n```\r\n\r\n### Saving attachments\r\nWhen you save the document its attachements are stored in the gridstore. The pre-middleware detaches the buffer, keys etc. from the attachments\r\nbecause mongodb cannot store large files. Since mongoose does not contain post middleware to manipulate the document after a save, \r\nyou have to reload attachments yourself right after a save (or find for that matter):\r\n\r\n```javascript\r\nvar email = new Email();\r\n\r\nemail.addAttachment(\"file.txt\", new Buffer('test'))\r\n.then(function() {\r\n    return email.save();\r\n})\r\n.then(email.loadAttachments)\r\n.then(function(doc) {\r\n    //doc now contains all attachments again after a save.\r\n})\r\n.catch(function(err) {\r\n    throw(err);\r\n});\r\n\r\n//Query and loadAttachments\r\nEmail.find({}, function(err,docs) {\r\n    if(err) throw err;\r\n    docs.forEach(function(doc) {\r\n        doc.loadAttachments.done();\r\n    });\r\n})\r\n```\r\n\r\n### Updating attachments\r\n```javascript\r\n\r\nemail.updateAttachment('file.txt', new Buffer('updated test'))\r\n.then(function(doc) {\r\n\t//modified document including attachments is given back by the promise for further chaining.\r\n})\r\n.catch(function(err) {\r\n\tconsole.log('error updating attachment');\r\n\tthrow err;\r\n});\r\n```\r\n\r\n### Removing attachments\r\n\r\n```javascript\r\nemail.removeAttachment('file.json')\r\n.then(function(doc) {\r\n\t//modified document including updated attachments is given back by the promise\r\n})\r\n.catch(function(err) {\r\n\tconsole.log('error removing attachment');\r\n\tthrow err;\r\n});\r\n```\r\n\r\n### Loading attachments\r\n\r\n#### Load all attachments\r\n\r\n```javascript\r\nemail.loadAttachments()\r\n.then(function(doc) {\r\n\t//All attachments including buffers are in the attachments array.\r\n})\r\n.catch(function(err) {\r\n\tconsole.log('error loading all attachments');\r\n\tthrow err;\r\n});\r\n```\r\n\r\n#### Partially load all attachments\r\n\r\n```javascript\r\nemail.partialLoadAttachments()\r\n.then(function(doc) {\r\n\t//All attachments are in the attachments array. Buffers are empty for each attachment.\r\n})\r\n.catch(function(err) {\r\n\tconsole.log('error partial loading all attachments');\r\n\tthrow err;\r\n});\r\n```\r\n\r\n#### Partially load a single attachment\r\n\r\n```javascript\r\nemail.partialLoadSingleAttachment('file.json')\r\n.then(function(doc) {\r\n\t//only filename, keys and mimetype filled in the attachment. Buffer is empty.\r\n})\r\n.catch(function(err) {\r\n\tconsole.log('error partial loading attachment');\r\n\tthrow err;\r\n});\r\n```\r\n\r\n#### Full load of a single attachment\r\n\r\n```javascript\r\nemail.loadSingleAttachment('file.json')\r\n.then(function(doc) {\r\n\t//attachment is fully loaded and stored in the attachments array.\r\n})\r\n.catch(function(err) {\r\n\tconsole.log('error full loading attachment');\r\n\tthrow err;\r\n});\r\n```\r\n\r\n\r\n### Test\r\nAbove scenarios have been tested and can be found in the test directory of the node module. \r\nYou can verify the package by executing mocha test in the root of the module.\r\n\r\n[license-image]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\r\n[license-url]: license.txt\r\n\r\n[npm-url]: https://npmjs.org/package/mongoose-gridstore\r\n[npm-version-image]: https://img.shields.io/npm/v/mongoose-gridstore.svg?style=flat\r\n[npm-downloads-image]: https://img.shields.io/npm/dm/mongoose-gridstore.svg?style=flat\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/dlemon/mongoose-gridstore.git"
  },
  "scripts": {
    "test": "NODE_ENV=test mocha -R spec test/"
  },
  "version": "0.1.25"
}
